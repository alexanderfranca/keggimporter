import configparser
import os
import pprint
from os.path import expanduser
from AnendbFileSystem import *
from pkg_resources import get_distribution
import re
import sys


# TODO: tests
class Config:
    """
    Loads, check consistency and offer configuration parameters from the keggimporter.conf file.
    """

    conf = None
    configurationFile = None
    expectedConfigs = {} 


    def __init__( self ):

        self.afs = AnendbFileSystem()

        self.expectedConfigs = { 'files': [ 'empty' ], 'directories': [ 'inserts' ] }


    def loadConfiguration( self ):
        """
        Load the configurations from the keggimporter.conf file.
        """

        self.conf = configparser.ConfigParser()

        if not self.getConfigurationFile():
            myPlace = expanduser("~")

            confFile = myPlace + '/.keggimporter.conf' 

            self.setConfigurationFile( confFile )
        else:
            confFile = self.getConfigurationFile()


        # Actual read the configurations.
        self.conf.read( confFile )

        if self.existsConfigurationFile( confFile ):
            self.checkConfigurationFile( confFile )
        else:
            return False


    def setConfigurationFile( self, conf_file=None ):
        """
        Set the current keggimporter.conf file.

        Args:
            conf_file(str): Full path for the keggimporter.conf
        
        """

        self.configurationFile = conf_file


    def getPackageInfo( self ):
        """
        Returns package KeggReader metadata.

        The metadata is found in the 'PKG-INFO' file generated by setuptools, which used the setup.py file.

        Example:
        ::

            {'Author': 'Franca AF (Alexander da Franca Fernandes)',
             'Author-email': 'alexander@francafernandes.com.br',
             'Description': 'KeggReader helps to deal with KEGG local files',
             'Home-page': 'http://www.sitemaldito.com.br/keggreader',
             'License': 'BSD',
             'Metadata-Version': '1.0',
             'Name': 'KeggReader',
             'Platform': 'Linux',
             'Summary': 'KEGG local files data picking',
             'Version': '0.1'}

        Returns:
            (dict): Package metadata.

        """
        pkgData = {}

        pkgInfo = get_distribution('keggimporter').get_metadata('PKG-INFO')

        rawData = pkgInfo.split("\n")
        rawData.pop()

        reData = re.compile('^(.*?):\s(.*)')
        for data in rawData:
            records = reData.search( data ) 

            key   = records.group(1)
            value = records.group(2)

            pkgData.update( { key: value } ) 

        return pkgData 


    def existsConfigurationFile( self, conf_file=None ):
        """
        Check if the configuration file exists.

        If not, print error message because KeggReader depends on at least one keggimporter.conf file.

        Args:
            conf_file(str): Full path for the configuration file.

        Returns:
            (boolean): False or True depending on the file existence.

        """

        # Check if the file exists.
        if not self.afs.isFile( conf_file ):
            print( "\n\n" )
            print( '------------------------------------------------------------------------------' )
            print( 'ERROR: Configuration file not found: ' + conf_file )
            print( 'Take a look at the documentation to know how to create keggimporter.conf file.' )
            print( 'NOTHING, NONE, WILL WORK WITHOUT keggimporter.conf file.' )

            pkgData = self.getPackageInfo()

            print( 'Read the documentation in the link below: ' )
            print( pkgData['Home-page'] + '/documentation' )
            print( '------------------------------------------------------------------------------' )
            print( "\n\n" )

            return False
        else:
            return True


    def checkConfigurationFile( self, conf_file=None ):
        """
        Check if the configuration file is well formed.

        It means the file have all the required sections, options and make sure the option values actual exists.

        This method print an complete error summary in case the file is not well formated.

        Args:
            conf_file(str): Full path for the configuration file.

        """
    
        notFoundSections           = []
        notFoundFilesOptions       = []
        notFoundFiles              = []
        notFoundDirectoriesOptions = []
        notFoundDirectories        = []
        confFile                   = conf_file 

        if self.checkFilesSectionExists( conf_file ):
            notFoundFilesOptions = self.getNotFoundFilesOptions( conf_file )
            notFoundFiles        = self.getNotFoundFilesFiles( conf_file )
        else:
            notFoundSections.append( 'files' )


        if self.checkDirectoriesSectionExists( conf_file ):
            notFoundDirectoriesOptions = self.getNotFoundDirectoriesOptions( conf_file )
            notFoundDirectories        = self.getNotFoundDirectoriesDirectories( conf_file )
        else:
            notFoundSections.append( 'directories' )


        if len(notFoundSections) == 0 and len(notFoundFilesOptions) == 0 and len(notFoundFiles) == 0 and len(notFoundDirectoriesOptions) == 0 and len(notFoundDirectories) == 0:
            weGotAnError = False 
        else:
            weGotAnError = True 
            self.printConfigurationFileErrorMessage( notFoundSections, notFoundFilesOptions, notFoundFiles, notFoundDirectoriesOptions, notFoundDirectories )


    def getConfigurationFile( self ):
        """
        Return the configuration file path.

        Returns:
            (str): Full path of the configuration file.
        """

        return self.configurationFile


    def getConfigurations( self ):
        """
        Return the Config object.

        Returns:
            (object): Config object.

        """

        return self.conf


    def checkFilesSectionExists( self, conf_file=None ):
        """
        Check if the 'files' section exists in the configuration file.

        Args:
            conf_file(str): Full path for the configuration file.

        Returns:
            (boolean): True of False.

        """
        if not self.conf.has_section( 'files' ):
            return False
        else:
            return True


    def checkDirectoriesSectionExists( self, conf_file=None ):
        """
        Check if the 'directories' section exists in the configuration file.

        Args:
            conf_file(str): Full path for the configuration file.

        Returns:
            (boolean): True of False.

        """

        if not self.conf.has_section( 'directories' ):
            return False
        else:
            return True


    def getNotFoundFilesOptions( self, conf_file=None ):
        """
        Return required options not found in the 'files' section of the configuration file.

        Args:
            confg_file(str): Full path for the configuration file.

        Returns:
            (list): List of not found options in the 'files' section.

        """

        notFoundOptions = []

        for option in self.expectedConfigs['files']:
            if not self.conf.has_option( 'files', option ):
                notFoundOptions.append( option )


        return notFoundOptions

    def getFoundFilesOptions( self, conf_file=None ):
        """
        Return required options FOUND in the 'files' section of the configuration file.

        Args:
            confg_file(str): Full path for the configuration file.

        Returns:
            (list): List of found options in the 'files' section.

        """

        foundOptions = []

        for option in self.expectedConfigs['files']:
            if self.conf.has_option( 'files', option ):
                foundOptions.append( self.conf.get( 'files', option ) )

        return foundOptions


    def getNotFoundFilesFiles( self, conf_file=None ):
        """
        Return required files definition options not found in the 'files' section of the configuration file.

        Args:
            confg_file(str): Full path for the configuration file.

        Returns:
            (list): List of not found files definition in the 'files' section.

        """

        notFoundFiles   = []

        for option in self.getFoundFilesOptions( conf_file ):
            if not self.afs.isFile( option ):
                notFoundFiles.append( option )

        return notFoundFiles


    def getNotFoundDirectoriesOptions( self, conf_file=None ):
        """
        Return required options not found in the 'directories' section of the configuration file.

        Args:
            confg_file(str): Full path for the configuration file.

        Returns:
            (list): List of not found options in the 'directories' section.

        """

        notFoundOptions = []

        for option in self.expectedConfigs['directories']:
            if not self.conf.has_option( 'directories', option ):
                notFoundOptions.append( option )


        return notFoundOptions


    def getFoundDirectoriesOptions( self, conf_file=None ):
        """
        Return required options FOUND in the 'directories' section of the configuration file.

        Args:
            confg_file(str): Full path for the configuration file.

        Returns:
            (list): List of found options in the 'directories' section.

        """

        foundOptions = []

        for option in self.expectedConfigs['directories']:
            if self.conf.has_option( 'directories', option ):
                foundOptions.append( self.conf.get( 'directories', option ) )

        return foundOptions


    def getNotFoundDirectoriesDirectories( self, conf_file=None ):
        """
        Return required directories definition options not found in the 'directories' section of the configuration file.

        Args:
            confg_file(str): Full path for the configuration file.

        Returns:
            (list): List of not found directories definition in the 'directories' section.

        """

        notFoundDirectories = []

        for option in self.getFoundDirectoriesOptions( conf_file ):
            if not self.afs.isDirectory( option ):
                notFoundDirectories.append( option )

        return notFoundDirectories 


    def printConfigurationFileErrorMessage( self, not_found_sections=None, not_found_files_options=None, not_found_files=None, not_found_directories_options=None, not_found_directories=None ):
        """
        Print an summary of errors found in the configuration file.

        Args:
            not_found_sections(list): Not found required sections in the file.
            not_found_files_options(list): Not found required options in the 'files' section.
            not_found_files(list): Not found actual files set in the 'files' section.
            not_found_directories_options(list): Not found required directories options in the 'directories' section.
            not_found_directories(list): Not found actual directories set in the 'directories' section.

        """

        print( '------------------------------------------------------------------------------' )
        print( "--- ERROR ---" )
        print( "Please, create a proper .keggimporter.conf file, with all the required sections, ")
        print( "all the required options and with valid files and directories.")
        print( "\n")
        print( "--- What is wrong in your file ---" )
        if len(not_found_sections) > 0:
            print( 'Not found config file sections: ')
            for section in not_found_sections:
                print( '    ' + section )

        if len(not_found_files_options) > 0:
            print( 'Not found config file options: ' )
            for option in not_found_files_options:
                print( '    ' + option )

        if len(not_found_files) > 0:
            print( 'Not found files: ' )
            for myFile in not_found_files:
                print( '    ' + myFile )

        if len(not_found_directories_options) > 0:
            print( 'Not found directories options: ' )
            for directory in not_found_directories_options:
                print( '    ' + directory )

        if len(not_found_directories) > 0:
            print( 'Not found directories: ' )
            for directory in not_found_directories:
                print( '    ' + directory )

        pkgData = self.getPackageInfo()

        print( "\n" )
        print( 'Read the documentation in the link below: ' )
        print( pkgData['Home-page'] + '/documentation' )
        print( '------------------------------------------------------------------------------' )



